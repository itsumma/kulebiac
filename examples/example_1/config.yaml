stacks:
  - name: production
    cloudId: <%= env.CLOUD_ID %>
    token: <%= env.YC_TOKEN %>
    folderId: <%= env.FOLDER_ID %>
    provider: yandex

    ## backend
    backendConfiguration:
      bucket: <%= env.STATE_BUCKET_NAME %>
      accessKey: <%= env.ACCESS_KEY %>
      secretKey: <%= env.SECRET_KEY %>

    ## service accounts
    serviceAccounts:
      - name: k8s-cluster-sa
        description: SA for k8s
        createStaticAccessKey: true
        createAccountKey: false
        createIamApiKey: false
        folderRoles:
          - k8s.clusters.agent
          - vpc.publicAdmin
          - k8s.cluster-api.cluster-admin
          - load-balancer.admin

      - name: container-registry-sa
        description: SA for container registry
        createStaticAccessKey: false
        createAccountKey: true
        createIamApiKey: false
        folderRoles:
          - container-registry.images.pusher
          - container-registry.images.puller

      - name: storage-s3
        description: "SA for s3"
        createStaticAccessKey: true
        createAccountKey: false
        createIamApiKey: false
        folderRoles:
          - storage.editor

    ## buckets
    buckets:
      - name: my-demo-storage-s3
        acl: private
        defaultStorageClass: "STANDARD"
        versioning:
          enabled: true

    ## static ips
    staticIps:
      - name: nat-ip
        zone: ru-central1-a
      - name: k8s-ingress-ip
        zone: ru-central1-a

    ## network
    vpcs:
      - name: my-vpc-name
        publicSubnets:
          - name: public-subnet
            subnet: 10.0.255.0/24
            zone: ru-central1-a
        infraSubnets:
          - name: internal-subnet1-a
            subnet: 10.0.1.0/24
            zone: ru-central1-a
        addStaticRoutes: []
        natData:
          enabled: true
          params:
            name: nat-vm
            imageId: fd8v7ru46kt3s4o5f0uo
            subnet: public-subnet
            staticIp: nat-ip


    ## private vms
    privateInstances: []

    ## public vms
    publicInstances: []

    ## registries
    registries:
      - name: my-registry

    ## k8s
    k8sClusters:
      - name: my-k8s-cluster
        network: my-vpc-name
        subnet: internal-subnet1-a
        clusterSa: k8s-cluster-sa
        nodesSa: container-registry-sa
        workerGroups:
          - name: worker-group
            instanceName: node-{instance.short_id}
            scalePolicy:
              autoScaleMode: true
              autoScaleMin: 3
              autoScaleMax: 5
              autoScaleInitial: 3
        addons:
          ingress:
            enabled: true
            staticIp: k8s-ingress-ip
          certManager:
            enabled: true
          dashboard:
            enabled: true
          s3Storage:
            enabled: true
            bucket: my-demo-storage-s3
            serviceAccount: storage-s3
          manifests: []

    ## postgres
    pgClusters:
      - name: my-pg-cluster
        network: my-vpc-name
        host:
          subnet: internal-subnet1-a
        databases:
          - userName: my-db-user
            dbName: my-db
            extensions:
              - uuid-ossp


    ## elastic search
    elasticSearchClusters: []